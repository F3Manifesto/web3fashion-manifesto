@import './styles.module.scss';

.wrapper {
  @include magazineWrapper();
  height: 2050px;
  background-color: #151515;
  padding-top: 111px;

  .nftwhite {
    position: absolute;
    width: 30px;
    height: 30px;
    left: 330px;
    top: 17px;
  }


  $width: 25;
  $text: #33FF00;
  $bg: #151515;
  $cursor-speed: 35; // characters per second
  $duration: calc($width / $cursor-speed * 1s);
  $cursor-duration: calc($duration / $width);
  $cursor-wait-duration: 0.8s;
  $cursor-wait-iteration: 2;
  $paragraph-lengths: (18 1, 37 2, 139 6, 124 6, 231 11, 320 14, 100 5, 150 6, 156 6, 81 4, 17 1);
  
  @keyframes letters {
    // animation, go from left to right
    from {
      left: 0;
    }
    to {
      left: $width + ch;
    }
  }

  @keyframes lines {
      // go from top to bottom
      from {
        top: -1%;
      }
      to {
        top: 100%;
      }
  }

  @keyframes cursor-type { 
    50% { 
      border-color: $bg; 
    } 
  }

  @keyframes cursor-wait { 
    0% { 
      box-shadow: inset 2px 0 0 0 rgba(255, 255, 255, 0); 
    } 
    1% { 
      box-shadow: inset 2px 0 0 0 rgba(255, 255, 255, 1);
    }
    40% { 
      box-shadow: inset 2px 0 0 0 rgba(255, 255, 255, 1);
    }
  }

  .test {
    display: none;
    animation-name: cursor-wait;
    animation-duration: $cursor-wait-duration;
    animation-timing-function: ease;
    animation-iteration-count: 2;
    animation-fill-mode: backward;
    animation-delay:0s; 
    padding-left: 10px;
  }

  .type {
    margin-left: 80px;
    margin-bottom: 30px;
    position: relative;
    width: $width + ch;
    font-family: 'Courier';
    font-size: 15px;
    line-height: 1.5;
    word-wrap: break-word; // this has to be a predictable height and width to work
    overflow: hidden;
    color: $text;

    &.animate {
      // falls back to displaying static text
      @supports (width: 1ch) {
        &:before,
        &:after {
          box-sizing: border-box;
          content: '';
          position: absolute;
          z-index: 1;
          display: block;
          height: 34px;
          width: 100%;
          background-color: $bg; 
        }

        &:before {
          // cursor and first line mask
          border-left: 2px solid transparent;
          top: 100%;
          animation-name: letters, lines, cursor-type, cursor-wait;
          animation-fill-mode: both, both, both, backwards;
        }

        &:after {
          // mask for subsequent lines
          content: '';
          height: 100%;
          top: 100%;
          left: 0;
          margin-top: 1.5em;
        }
      }
    }
  }


  $iterations: 1;
  $total-delay: 0s;

  @each $length, $lines in $paragraph-lengths {
    $this-characters: $length;
    $this-lines: $lines; 
    $this-selector: '.type';
    $this-delay: $total-delay;
    $this-type-delay: calc($this-delay + $cursor-wait-duration * $cursor-wait-iteration); 

    @for $i from 1 to $iterations {
      $this-selector: $this-selector + ' + .type';
    }
    
    #{$this-selector} {
      &:before {
        animation-duration: $duration, ($duration * $this-lines), $cursor-duration, $cursor-wait-duration;
        animation-timing-function: steps($width, end), steps($this-lines, end), step-end, ease-out;
        animation-iteration-count: $this-lines, 1, $this-characters, $cursor-wait-iteration;  
        animation-delay: $this-type-delay, $this-type-delay, $this-type-delay, $this-delay; 
      }

      &:after {
        animation: lines ($duration * $this-lines) steps($this-lines, end) 1;
        animation-fill-mode: both;
        animation-delay: $this-type-delay;
      }
    }
    $total-delay: $this-type-delay + calc($this-characters / $cursor-speed);
    $iterations: $iterations + 1;  
  }

  .code {
    position: absolute;
    width: 960px;
    height: 350px;
    left: 960px;
    top: 1147px;
    opacity: 30%;
  }

}